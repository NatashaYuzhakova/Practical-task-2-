#!/usr/bin/env python
# coding: utf-8

# мсштаб.
# 
# Шаг 4. Сохранение предобработанных данных
# 
# 4.1. Сохраните предобработанные данные в новый CSV-файл или другой формат для дальнейшего использования.
# 
# 4.2. Опубликуйте ссылку на Github в LMS Odin.
# 
# Задание оценивается по системе: 0-1-2, где 0 - не зачтено, 1 - доработать, 2 - зачтено.
# 
# Сроки выполнения задания: 06.11-12.11
# 
# Если вы относитесь к категории безработных граждан, вам обязательно необходимо выполнять задания в соответствии с указанными сроками, чтобы сохранить пособие по безработице. Данные о результатах выполнения активностей курса каждую неделю автоматически передаются из Odin в центры занятости населения.

# ### Шаг 1. Загрузка данных
# ## 1.1. Скачайте набор данных (например, CSV-файл с данными о продажах, клиентах или любые другие данные).

# In[6]:


# Скачала данные о продажах


# In[7]:


import pandas as pd #Импортируем библиотеку пандас в пд


# In[8]:


data=pd.read_csv("C:/Users/natasha/Desktop/Data Sciece/Практическое задание 2/100 Sales Records.csv",delimiter=",")#чистаем файл и переносим его в переменную Дата


# In[9]:


print(data.head(20))


# ## 1.2. Используйте библиотеку Pandas, чтобы загрузить данные в Python и создать DataFrame.

# # Шаг 2. Очистка данных
# ## 2.1. Оцените состояние данных: выведите информацию о типах данных, наличии пропущенных значений и основных статистических характеристиках.
# 

# In[10]:


print(data.info())


# In[11]:


print(data.describe())


# In[12]:


s1=" shark "
print(f"string:{s1}")


# In[13]:


print(data.columns)


# In[14]:


col_name = ['Region', 'Country', 'Item_Type', 'Sales_Channel', 'Order_Priority',
       'Order_Date', 'Order_ID', 'Ship_Date', 'Units_Sold', 'Unit_Price',
       'Unit_Cost', 'Total_Revenue', 'Total_Cost', 'Total_Profit']
data.set_axis(col_name, axis = 'columns') # Чтобы переименовать столбцы, используем данный скрипт (вместо пробела поставили "_")


# In[15]:


data['Ship Date'].head(10)


# In[16]:


data.isna().sum() # .isna() выдает True или 1, если есть пропуск, .sum() суммирует единицы по столбцам


# In[17]:


(data.isna().sum() / len(data)).round(4) * 100 # посчитаем процент пропущенных значений


# In[18]:


data[['Units Sold', 'Total Revenue','Order ID']].isnull().corr() # матрица корреляции пропущенных значений 


# ## 2.2. Идентифицируйте и обработайте пропущенные значения в данных. Вы можете удалить строки с пропущенными значениями или заполнить их средними или медианными значениями в зависимости от контекста.

# In[19]:


data.dropna(subset = ['Order ID','Total Revenue'], inplace=True)  # Удалим строку с пропусками в столбце  Order ID


# In[20]:


data.isna().sum() # .isna() выдает True или 1, если есть пропуск, .sum() суммирует единицы по столбцам


# In[21]:


data['Units Sold'].fillna(data['Units Sold'].mean(), inplace = True) # Заполнили пропуск средним значением


# In[22]:


data.isna().sum() # .isna() выдает True или 1, если есть пропуск, .sum() суммирует единицы по столбцам


# In[23]:


data[data.duplicated() == True] # Наличие дубликотов


# In[24]:


data['Order Date'] = data['Order Date'].astype('datetime64[ns]') #Теперь мы преобразуем его в формат datetime с помощью функции DataFrame.astype().


# In[25]:


data['Ship Date'] = data['Ship Date'].astype('datetime64[ns]')#Теперь мы преобразуем его в формат datetime с помощью функции DataFrame.astype().


# In[26]:


data.info() #Как мы можем видеть в выходных данных, формат столбца ‘Date’ был изменен на формат datetime.


# In[27]:


data['Order Date'] = pd.to_datetime(data['Order Date'], format='%y%m%d') # Преобразуем дату в формат ГГГГ.ММ.ДД


# In[28]:


print(data)


# # Шаг 3. Преобразование данных

# ## 3.1. Преобразуйте данные, если это необходимо. Например, преобразуйте категориальные признаки в числовые с использованием кодировки, наподобие one-hot encoding.

# In[29]:


data.Region.unique()#Смотрим категории в столбце Регион


# In[30]:


data.Region.value_counts() #Смотрим колво каждой категории в данном столбце


# In[31]:


data.Region.value_counts().count()


# In[32]:


data['Region'] = pd.factorize(data['Region'])[ 0 ] #Переводим столбец Регион в числовой


# In[33]:


print(data)


# In[34]:


columns = data.select_dtypes(['object']).columns


# In[35]:


data[columns] = data[columns].apply ( lambda x: pd.factorize (x)[ 0 ]) #Преобразуем все существующие категориальные значения в числа


# In[36]:


print(data[columns])


# ## 3.2. Масштабируйте числовые признаки, если это требуется, чтобы они имели схожий масштаб.

# In[46]:





# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:




